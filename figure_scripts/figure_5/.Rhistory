#then extras
extras <- temp_df %>%
select("Acyltransferase 3","cAMP phosphodiesterase","Colicin V secretion")
#set the colours:
##read in the colours for these:
more_complex_plotting_gene_colours <- read.csv("colours.csv",
header = F) %>%
rename(gene_name = V1,colour = V2) %>%
pull(colour, name = gene_name)
t4 %>%
#metabolic groups
gheatmap(metabolic_groups, color = NULL,
colnames_position = "top",
width = 0.1 * ncol(metabolic_groups),
colnames_angle = 60,
hjust = 0, font.size = 3) %>%
#extras
gheatmap(extras, color = NULL,
colnames_position = "top",
colnames_angle = 60,
width = 0.1 * ncol(extras),
offset = 0.05,
hjust = 0, font.size = 3) %>%
#phages
gheatmap(phages, color = NULL,
width = 0.1 * ncol(phages),
colnames_position = "top",
colnames_angle = 60,
offset = 0.12,
hjust = 0, font.size = 3) +
scale_fill_manual(values = c(more_complex_plotting_gene_colours)) +
ylim(0,500)
##if want it in order??
left_phages <- temp_df %>%
select("PHAGE_Acinet_YMC11/11/R3177_NC_041866","PHAGE_Entero_mEp460_NC_019716","PHAGE_Erwini_phiEt88_NC_015295","PHAGE_Salmon_118970_sal3_NC_031940")
position_one <- temp_df %>%
select("gentisate degradation I", "Colicin V secretion")
position_two <- temp_df %>%
select("tetrathionate reduction I (to thiosulfate)")
position_three <- temp_df %>%
select("cAMP phosphodiesterase","Acyltransferase 3")
right_phages <- phages <-  temp_df %>%
select("PHAGE_Klebsi_phiKO2_NC_005857")
dfs_to_plot <- list(left_phages,position_one,position_two,position_three,right_phages)
temp_plot <- t4
tree_width <- max(t4$data$x)
offset_num = 0
col_width = 0.1 # is as proportion of the width of the tree!
for (df_name in dfs_to_plot) {
width_num <- col_width * ncol(df_name)
temp_plot <- temp_plot %>%
gheatmap(df_name, color = NULL,
width = width_num,
colnames_position = "top",
colnames_angle = 60,
offset = offset_num,
hjust = 0, font.size = 3)
#set offset:
offset_num = offset_num + (width_num * tree_width) + (col_width * tree_width)
}
p3 <- temp_plot +
scale_fill_manual(values = c(more_complex_plotting_gene_colours)) +
ylim(0,500)
p3
ggsave(plot = p3,
filename = "marc_tree_plasticity_zone_presence_absence.png", dpi = 600, height = 8, width = 16, limitsize = F)
#now create a table of these:
genes_clusters_table <- data.frame(table(genes_between_tRNAs_clusters$gene_groups)) %>%
arrange(-Freq)
genes_clusters <- data.frame(gene_groups = genes_clusters_table$Var1,
cluster_num = rownames(genes_clusters_table)) %>%
inner_join(genes_between_tRNAs_clusters) %>%
mutate(cluster_num = as.character(cluster_num)) %>%
column_to_rownames(var = "strain") %>%
select(cluster_num)
genes_clusters <- data.frame(gene_groups = genes_clusters_table$Var1,
cluster_num = rownames(genes_clusters_table)) %>%
inner_join(genes_between_tRNAs_clusters) %>%
mutate(cluster_num = as.character(cluster_num)) %>%
tibble::column_to_rownames(var = "strain") %>%
select(cluster_num)
t4 %>% gheatmap(genes_clusters, color = NULL)
genes_clusters_heatmap <- genes_clusters %>%
rownames_to_column(var = "strain") %>%
mutate(Presence = "Y") %>%
pivot_wider(names_from = cluster_num, values_from = Presence,values_fill = NA) %>%
column_to_rownames(var = "strain")
genes_clusters_heatmap <- genes_clusters %>%
rownames_to_column(var = "strain") %>%
mutate(Presence = "Y") %>%
pivot_wider(names_from = cluster_num, values_from = Presence,values_fill = NA) %>%
tibble::column_to_rownames(var = "strain")
t4 %>% gheatmap(genes_clusters_heatmap,color = NULL,colnames_position = "top", colnames_angle = 90, hjust = 0 )  +
ylim(0,450)
genes_clusters_heatmap <- genes_clusters %>%
rownames_to_column(var = "strain") %>%
mutate(Presence = "Y") %>%
tidyr::pivot_wider(names_from = cluster_num, values_from = Presence,values_fill = NA) %>%
tibble::column_to_rownames(var = "strain")
t4 %>% gheatmap(genes_clusters_heatmap,color = NULL,colnames_position = "top", colnames_angle = 90, hjust = 0 )  +
ylim(0,450)
genes_clusters_heatmap <- genes_clusters %>%
rownames_to_column(var = "strain") %>%
mutate(Presence = "Y") %>%
tidyr::pivot_wider(names_from = cluster_num, values_from = Presence,values_fill = NA) %>%
tibble::column_to_rownames(var = "strain")
genes_clusters_heatmap <- genes_clusters %>%
tibble::rownames_to_column(var = "strain") %>%
mutate(Presence = "Y") %>%
tidyr::pivot_wider(names_from = cluster_num, values_from = Presence,values_fill = NA) %>%
tibble::column_to_rownames(var = "strain")
t4 %>% gheatmap(genes_clusters_heatmap,color = NULL,colnames_position = "top", colnames_angle = 90, hjust = 0 )  +
ylim(0,450)
clusters_and_strains <- genes_clusters %>%
rename(Cluster = cluster_num) %>%
rownames_to_column(var = "strain") %>%
group_by(Cluster) %>%
summarise(list_strains = list(strain),n = n())
clusters_and_strains <- genes_clusters %>%
rename(Cluster = cluster_num) %>%
tidyr::rownames_to_column(var = "strain") %>%
group_by(Cluster) %>%
summarise(list_strains = list(strain),n = n())
clusters_and_strains <- genes_clusters %>%
rename(Cluster = cluster_num) %>%
tibble::rownames_to_column(var = "strain") %>%
group_by(Cluster) %>%
summarise(list_strains = list(strain),n = n())
#then use these to get a named vector set
clusters_and_strains_list <- clusters_and_strains$list_strains
names(clusters_and_strains_list) <- clusters_and_strains$Cluster
internal_nodes_and_subtree_tips <- subset.data.frame(ggtree(marc_tree_dropped_tips)$data, isTip != TRUE, select = "node") %>%
mutate(node = node - length(marc_tree_dropped_tips$tip.label)) %>%
mutate(tips = map(node, ~ get_subtree_at_node(marc_tree_dropped_tips, .x )$subtree$tip.label)) %>%
# compare the tips in the subtrees with the strain names in each of the blast clusters
mutate(cluster = map(tips, function(x) map(seq_along(clusters_and_strains_list), function(y)  ifelse(all(unlist(x) %in% unlist(clusters_and_strains_list[y])), names(clusters_and_strains_list)[y], NA)))) %>%
unnest(cols = c(cluster)) %>% # expand out as map returns a list
filter(! is.na(cluster)) %>% # remove all NA from the above mapped mutate (2 lines above)
# now need to try and get rid of nodes that are descendents of others that also are in the same cluster - so do similar to before
mutate(is_subtree =   map(seq_along(tips), function(x) map(seq_along(tips), function(y)  ifelse(all(unlist(tips[x]) %in% unlist(tips[y])) & x != y , TRUE, FALSE)))) %>%
mutate(is_subtree_2 = map(is_subtree, ~ ifelse(TRUE %in% .x, TRUE, FALSE))) %>%
filter(is_subtree_2 == FALSE) # remove all FALSE from the above mapped mutate (2 lines above) %>%
?unnest
internal_nodes_and_subtree_tips <- subset.data.frame(ggtree::ggtree(marc_tree_dropped_tips)$data, isTip != TRUE, select = "node") %>%
mutate(node = node - length(marc_tree_dropped_tips$tip.label)) %>%
mutate(tips = purrr::map(node, ~ micro.gen.extra::get_subtree_at_node(marc_tree_dropped_tips, .x )$subtree$tip.label)) %>%
# compare the tips in the subtrees with the strain names in each of the blast clusters
mutate(cluster = purrr::map(tips, function(x) purrr::map(seq_along(clusters_and_strains_list), function(y)  ifelse(all(unlist(x) %in% unlist(clusters_and_strains_list[y])), names(clusters_and_strains_list)[y], NA)))) %>%
tidyr::unnest(cols = c(cluster)) %>% # expand out as map returns a list
filter(! is.na(cluster)) %>% # remove all NA from the above mapped mutate (2 lines above)
# now need to try and get rid of nodes that are descendents of others that also are in the same cluster - so do similar to before
mutate(is_subtree =   purrr::map(seq_along(tips), function(x) purrr::map(seq_along(tips), function(y)  ifelse(all(unlist(tips[x]) %in% unlist(tips[y])) & x != y , TRUE, FALSE)))) %>%
mutate(is_subtree_2 = purrr::map(is_subtree, ~ ifelse(TRUE %in% .x, TRUE, FALSE))) %>%
filter(is_subtree_2 == FALSE) # remove all FALSE from the above mapped mutate (2 lines above) %>%
internal_nodes_and_subtree_tips <- subset.data.frame(ggtree::ggtree(marc_tree_dropped_tips)$data, isTip != TRUE, select = "node") %>%
mutate(node = node - length(marc_tree_dropped_tips$tip.label)) %>%
mutate(tips = purrr::map(node, ~ castor::get_subtree_at_node(marc_tree_dropped_tips, .x )$subtree$tip.label)) %>%
# compare the tips in the subtrees with the strain names in each of the blast clusters
mutate(cluster = purrr::map(tips, function(x) purrr::map(seq_along(clusters_and_strains_list), function(y)  ifelse(all(unlist(x) %in% unlist(clusters_and_strains_list[y])), names(clusters_and_strains_list)[y], NA)))) %>%
tidyr::unnest(cols = c(cluster)) %>% # expand out as map returns a list
filter(! is.na(cluster)) %>% # remove all NA from the above mapped mutate (2 lines above)
# now need to try and get rid of nodes that are descendents of others that also are in the same cluster - so do similar to before
mutate(is_subtree =   purrr::map(seq_along(tips), function(x) purrr::map(seq_along(tips), function(y)  ifelse(all(unlist(tips[x]) %in% unlist(tips[y])) & x != y , TRUE, FALSE)))) %>%
mutate(is_subtree_2 = purrr::map(is_subtree, ~ ifelse(TRUE %in% .x, TRUE, FALSE))) %>%
filter(is_subtree_2 == FALSE) # remove all FALSE from the above mapped mutate (2 lines above) %>%
View(internal_nodes_and_subtree_tips)
collapsed_t4 <- collapse_tree(t4,
internal_nodes_and_subtree_tips$node + length(marc_tree_dropped_tips$tip.label),
"mixed",
FALSE)
##scaling....
temp_scaled <- t4
for ( node_num in (internal_nodes_and_subtree_tips$node + length(marc_tree_dropped_tips$tip.label))) {
temp_scaled <- scaleClade(temp_scaled, node = node_num, scale = .001)
}
collapsed_t4_w_colours <- collapse_tree(temp_scaled,
internal_nodes_and_subtree_tips$node + length(marc_tree_dropped_tips$tip.label),
"max",
random_clusters_colours[unlist(internal_nodes_and_subtree_tips$cluster)])
#set some random colours:
random_clusters_colours <- micro.gen.extra::random_n_colours(length(unique(clusters_and_strains$Cluster)),TRUE)
names(random_clusters_colours) <- unlist(unique(clusters_and_strains$Cluster))
collapsed_t4_w_colours <- collapse_tree(temp_scaled,
internal_nodes_and_subtree_tips$node + length(marc_tree_dropped_tips$tip.label),
"max",
random_clusters_colours[unlist(internal_nodes_and_subtree_tips$cluster)])
collapsed_t4_w_colours
collapsed_t4_w_colours$data  <- collapsed_t4_w_colours$data %>%
left_join(genes_clusters %>% rownames_to_column(var = "label"), by = "label")
#and also get the node number for those nodes that were collapsed
collapsed_t4_w_colours$data <- internal_nodes_and_subtree_tips %>%
mutate(correct_node_num = node + length(marc_tree_dropped_tips$tip.label),
cluster = as.character(cluster),
n = as.integer(map(tips, ~ length(.x)))) %>%
select(correct_node_num, cluster,n) %>%
rename(node = correct_node_num) %>%
right_join(collapsed_t4_w_colours$data, by = "node")
collapsed_t4_w_colours$data  <- collapsed_t4_w_colours$data %>%
left_join(genes_clusters %>% rownames_to_column(var = "label"), by = "label")
collapsed_t4_w_colours$data  <- collapsed_t4_w_colours$data %>%
left_join(genes_clusters %>% tibble::rownames_to_column(var = "label"), by = "label")
#and also get the node number for those nodes that were collapsed
collapsed_t4_w_colours$data <- internal_nodes_and_subtree_tips %>%
mutate(correct_node_num = node + length(marc_tree_dropped_tips$tip.label),
cluster = as.character(cluster),
n = as.integer(purrr::map(tips, ~ length(.x)))) %>%
select(correct_node_num, cluster,n) %>%
rename(node = correct_node_num) %>%
right_join(collapsed_t4_w_colours$data, by = "node")
collapsed_t4_w_colours_df <- genes_clusters %>%
rownames_to_column(var = "label")
collapsed_t4_w_colours_df <- genes_clusters %>%
tibble::rownames_to_column(var = "label")
random_clusters_colours <- random_x_colours(length(unique(clusters_and_strains$Cluster)),TRUE)
tips_coloured_collapsed_t4_w_colours <- collapsed_t4_w_colours + ggtree::geom_tippoint(aes(color = as.factor(cluster_num))) +
ggtree::geom_tiplab(aes(label = as.factor(cluster_num))) +
ggtree::geom_point2(aes(subset=(! is.na(cluster)), size = n), shape = 23, fill = "black", alpha = 0.5)  +
scale_color_manual(values = random_clusters_colours)
tips_coloured_collapsed_t4_w_colours
clade_labels_for_collapsed_tree <- internal_nodes_and_subtree_tips$node + length(marc_tree_dropped_tips$tip.label)
names(clade_labels_for_collapsed_tree) <- unlist(internal_nodes_and_subtree_tips$cluster)
with_labels <- add_clades_to_tree(drawn_tree = tips_coloured_collapsed_t4_w_colours, clade_labels = clade_labels_for_collapsed_tree,FALSE,F)
ggsave(plot = with_labels,
filename = "collapsed_tree_condensed.svg", height = 20, width = 12 )
plot_order <- c(1:length(unique(genes_clusters$cluster_num)))
example_plots <- list()
for (plot in plot_order) {
temp_df <- subset.data.frame(genes_clusters, cluster_num == plot) %>%
rownames_to_column(var = "strain")
temp_df <- merge(temp_df, clusters_and_strain_names, by = "strain")
example_plots <- append(example_plots, paste0(gsub("26968_7_","26968_7#",sample(temp_df$cluster_name,1)),".gff",sep=""))
}
temp_df <- subset.data.frame(genes_clusters, cluster_num == plot) %>%
tibble::rownames_to_column(var = "strain")
example_plots <- list()
for (plot in plot_order) {
temp_df <- subset.data.frame(genes_clusters, cluster_num == plot) %>%
tibble::rownames_to_column(var = "strain")
temp_df <- merge(temp_df, clusters_and_strain_names, by = "strain")
example_plots <- append(example_plots, paste0(gsub("26968_7_","26968_7#",sample(temp_df$cluster_name,1)),".gff",sep=""))
}
View(genes_clusters)
View(temp_df)
example_plots <- list()
for (plot in plot_order) {
temp_df <- subset.data.frame(genes_clusters, cluster_num == plot) %>%
tibble::rownames_to_column(var = "strain")
example_plots <- append(example_plots, paste0(gsub("26968_7_","26968_7#",sample(temp_df$cluster_num,1)),".gff",sep=""))
}
example_plots
View(temp_df)
example_plots <- list()
for (plot in plot_order) {
temp_df <- subset.data.frame(genes_clusters, cluster_num == plot) %>%
tibble::rownames_to_column(var = "strain")
example_plots <- append(example_plots, paste0(gsub("26968_7_","26968_7#",sample(temp_df$strain,1)),".gff",sep=""))
}
example_plots
View(genes_clusters)
View(clusters_and_strains)
View(gene_sets_presence_absence)
names(example_plots) <- plot_order
example_plots_df <- data.frame(cluster = names(unlist(example_plots)),
name = unlist(example_plots)) %>%
write.csv(file = "example_plots_sets_of_genes.csv",
row.names = F,
quote = F)
example_plots <- append(example_plots, paste0(gsub("26968_7_","26968_7#",sample(temp_df$strain,1)),"cluster_1_cluster_1_cluster_1.gff",sep=""))
plot_order <- c(1:length(unique(genes_clusters$cluster_num)))
example_plots <- list()
for (plot in plot_order) {
temp_df <- subset.data.frame(genes_clusters, cluster_num == plot) %>%
tibble::rownames_to_column(var = "strain")
example_plots <- append(example_plots, paste0(gsub("26968_7_","26968_7#",sample(temp_df$strain,1)),"cluster_1_cluster_1_cluster_1.gff",sep=""))
}
names(example_plots) <- plot_order
example_plots_df <- data.frame(cluster = names(unlist(example_plots)),
name = unlist(example_plots)) %>%
write.csv(file = "example_plots_sets_of_genes.csv",
row.names = F,
quote = F)
more_complex_plotting_gene_colours
?micro.gen.extra::
?micro.gen.extra::create_dnaseqs
?micro.gen.extra::gggenes_df_from_gff_list()
example_plots
plot_order <- c(1:length(unique(genes_clusters$cluster_num)))
example_plots <- list()
for (plot in plot_order) {
temp_df <- subset.data.frame(genes_clusters, cluster_num == plot) %>%
tibble::rownames_to_column(var = "strain")
example_plots <- append(example_plots, paste0(gsub("26968_7_","26968_7#",sample(temp_df$strain,1)),"_cluster_1_cluster_1_cluster_1.gff",sep=""))
}
names(example_plots) <- plot_order
example_plots <- list()
for (plot in plot_order) {
temp_df <- subset.data.frame(genes_clusters, cluster_num == plot) %>%
tibble::rownames_to_column(var = "strain")
example_plots <- append(example_plots, paste0(gsub("26968_7_","26968_7#",sample(temp_df$strain,1)),"_cluster_1_cluster_1_cluster_1.gff",sep=""))
}
names(example_plots) <- plot_order
example_plots
paste("../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs/",example_plots)
paste("../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs/",example_plots, sep = "")
#get gggenes df :
gggenes_input <- micro.gen.extra::gggenes_df_from_gff_list(paste("../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs/",example_plots, sep = ""))
View(gggenes_df)
View(genes_to_plot)
more_complex_plotting_gene_colours
View(genes_to_plot_corrected)
View(more_complex_plotting)
View(genes_between_tRNAs_clusters)
View(gene_sets_presence_absence)
View(more_complex_plotting)
View(gggenes_input)
#get gggenes df :
gggenes_input <- micro.gen.extra::gggenes_df_from_gff_list(paste("../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs/",example_plots, sep = "")) %>%
left_join(more_complex_plotting %>% rename(colour_variable = Gene))
genoplot_data <- list()
genoplot_data$dna_seqs <- micro.gen.extra::create_dnaseqs(gggenes_df = gggenes_input,
set_gene_fill_colours = T,
gene_colours = more_complex_plotting_gene_colours)
genoplot_data$dna_seqs <- micro.gen.extra::create_dnaseqs(gggenes_df = gggenes_input,
set_gene_fill_colours = T,
gene_colours = more_complex_plotting_gene_colours)
more_complex_plotting_gene_colours
detach(name = "package:micro.gen.extra", unload = T)
ibrary(micro.gen.extra)
library(micro.gen.extra)
genoplot_data$dna_seqs <- micro.gen.extra::create_dnaseqs(gggenes_df = gggenes_input,
set_gene_fill_colours = T,
gene_colours = more_complex_plotting_gene_colours)
detach(name = "package:micro.gen.extra", unload = T)
library(micro.gen.extra)
genoplot_data$dna_seqs <- micro.gen.extra::create_dnaseqs(gggenes_df = gggenes_input,
set_gene_fill_colours = T,
gene_colours = more_complex_plotting_gene_colours)
gene_colours[1]
library(micro.gen.extra)
detach(name = "package:micro.gen.extra", unload = T)
library(micro.gen.extra)
genoplot_data <- list()
genoplot_data$dna_seqs <- micro.gen.extra::create_dnaseqs(gggenes_df = gggenes_input,
set_gene_fill_colours = T,
gene_colours = more_complex_plotting_gene_colours)
#get fasta sequences:
micro.gen.extra::fasta_from_gff_list(gff_list = paste("../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs/",example_plots, sep = ""))
#get fasta sequences:
micro.gen.extra::fasta_from_gff_list(gff_list = paste("../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs/",example_plots, sep = ""),
gff_names = names(example_plots))
#get fasta sequences:
fasta_sequences <- micro.gen.extra::fasta_from_gff_list(gff_list = paste("../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs/",example_plots, sep = ""),
gff_names = names(example_plots))
paste("../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs/",
example_plots,
sep = "") %>% gsub(".gff","")
gsub(".gff","",
paste("../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs/",
example_plots,
sep = ""))
fasta_sequences
fasta_sequences[1]
?seqinr::write.fasta
for (i in 1:length(fasta_sequences)) {
sequence = fasta_sequences[i]
seq_name = names(fasta_sequences[i])
seqinr::write.fasta(sequence,
names = seq_name,
file.out = glue::glue("{seq_name}.fasta"))
}
#get fasta sequences:
fasta_sequences <- micro.gen.extra::fasta_from_gff_list(gff_list = paste("../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs/",example_plots, sep = ""),
gff_names = names(example_plots),
fasta_dir = "output_fasta_sequences",
clean_up = FALSE)
detach(name = "package:micro.gen.extra", unload = T)
library(micro.gen.extra)
#get fasta sequences:
fasta_sequences <- micro.gen.extra::fasta_from_gff_list(gff_list = paste("../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs/",example_plots, sep = ""),
gff_names = names(example_plots),
fasta_dir = "output_fasta_sequences",
clean_up = FALSE)
?create_blast_comparisons
#set the blast comparisons:
genoplot_data$comparisons <- micro.gen.extra::create_blast_comparisons(blast_order = gsub(".gff","",
paste("../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs/",
example_plots,
sep = "")),
fasta_dir = "output_fasta_sequences")
?list.files
#set the blast comparisons:
genoplot_data$comparisons <- micro.gen.extra::create_blast_comparisons(blast_order = gsub(".fasta","",list.files("output_fasta_sequences/")),
fasta_dir = "output_fasta_sequences")
#set the blast comparisons:
genoplot_data$comparisons <- micro.gen.extra::create_blast_comparisons(blast_order = gsub(".fasta","",list.files("output_fasta_sequences/")),
fasta_dir = "output_fasta_sequences")
genoPlotR::plot_gene_map(genoplot_data$dna_seqs, genoplot_data$comparisons,
scale=T,
legend = T,
arrow_head_len = 400,
annotation_height = 0.5)
#plot the comparisons:
svg("synteny_of_clusters.svg", width = 10, height = 40,pointsize = 8)
genoPlotR::plot_gene_map(genoplot_data$dna_seqs, genoplot_data$comparisons,
scale=T,
legend = T,
arrow_head_len = 400,
annotation_height = 0.5)
dev.off()
#plot the comparisons:
svg("synteny_of_clusters.svg", width = 10, height = 20,pointsize = 8)
genoPlotR::plot_gene_map(genoplot_data$dna_seqs, genoplot_data$comparisons,
scale=T,
legend = T,
arrow_head_len = 400,
annotation_height = 0.5)
dev.off()
#plot the comparisons:
svg("synteny_of_clusters.svg", width = 12, height = 10,pointsize = 8)
genoPlotR::plot_gene_map(genoplot_data$dna_seqs, genoplot_data$comparisons,
scale=T,
legend = T,
arrow_head_len = 400,
annotation_height = 0.5)
dev.off()
example_plots
names(example_plots)
dna_seqs
genoplot_data$dna_seqs
names(genoplot_data$dna_seqs)
names(example_plots)
##change the names of these:
names(genoplot_data$dna_seqs) <- names(example_plots)
#plot the comparisons:
svg("synteny_of_clusters.svg", width = 12, height = 10,pointsize = 8)
genoPlotR::plot_gene_map(genoplot_data$dna_seqs, genoplot_data$comparisons,
scale=T,
legend = T,
arrow_head_len = 400,
annotation_height = 0.5)
dev.off()
View(more_complex_plotting)
colours_to_plot <- unique(more_complex_plotting$Gene)
colours_to_plot
?sample
value = sample.int(length(unique(more_complex_plotting$Gene)), 100)
value = sample.int(100, length(unique(more_complex_plotting$Gene)))
colours_to_plot <- data.frame(Gene = unique(more_complex_plotting$Gene),
value = sample.int(100, length(unique(more_complex_plotting$Gene))))
View(colours_to_plot)
ggplot(colours_to_plot) +
geom_point(x = Gene, y = value, color = Gene) +
scale_color_manual(values = c(more_complex_plotting_gene_colours))
ggplot(colours_to_plot) +
geom_point(aes(x = Gene, y = value, color = Gene)) +
scale_color_manual(values = c(more_complex_plotting_gene_colours))
ggplot(colours_to_plot) +
geom_bar(aes(x = Gene, y = value, color = fill)) +
scale_fill_manual(values = c(more_complex_plotting_gene_colours))
ggplot(colours_to_plot) +
geom_bar(aes(x = Gene, y = value, fill = Gene)) +
scale_fill_manual(values = c(more_complex_plotting_gene_colours))
ggplot(colours_to_plot) +
geom_col(aes(x = Gene, y = value, fill = Gene)) +
scale_fill_manual(values = c(more_complex_plotting_gene_colours))
unique_colours <- unique(more_complex_plotting$Gene)
unique_colours
unique_colours[1:21]
unique_colours <- unique(more_complex_plotting$Gene)
unique_colours <- unique(more_complex_plotting$Gene)
colours_to_plot <- data.frame(Gene = unique_colours[1:21],
value = sample.int(100, unique_colours[1:21]))
colours_to_plot <- data.frame(Gene = unique_colours[1:21],
value = sample.int(100, length(unique_colours[1:21])))
ggplot(colours_to_plot) +
geom_col(aes(x = Gene, y = value, fill = Gene)) +
scale_fill_manual(values = c(more_complex_plotting_gene_colours))
unique_colours
View(more_complex_plotting)
colours_to_plot <- data.frame(Gene = unique(more_complex_plotting$Gene),
value = sample.int(100, length(unique(more_complex_plotting$Gene))))
ggplot(colours_to_plot) +
geom_col(aes(x = Gene, y = value, fill = Gene)) +
scale_fill_manual(values = c(more_complex_plotting_gene_colours))
cowplot::get_legend(p4)
l1 <- cowplot::ggdraw(p4)
p4 <- ggplot(colours_to_plot) +
geom_col(aes(x = Gene, y = value, fill = Gene)) +
scale_fill_manual(values = c(more_complex_plotting_gene_colours))
cowplot::get_legend(p4)
l1 <- cowplot::ggdraw(p4)
ggsave(filename = "legend.png",
plot = l1,
dpi = 600)
l1 <- cowplot::ggdraw(cowplot::get_legend(p4))
ggsave(filename = "legend.png",
plot = l1,
dpi = 600)
ggsave(filename = "legend.svg",
plot = l1,
dpi = 600)
?tar
#### 13 - clean up ####
for (filename in list.files(path = "../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs",
full.names = TRUE)) {
file.remove(filename)
}
#remove the directory:
unlink("../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs/")
#remove the directory:
unlink("../../figshare_data/tetrathionate_gentisate/plasticity_zone_gffs/",
recursive = TRUE)
