setwd("~/Documents/Serratia_genus_paper/github_example/figure_scripts/figure_7")
library(micro.gen.extra)
#### 1 - get tree ####
tree_cols <- c("0" = "black",
"1" = "#bab0ac",
"2" = "#59a14f",
"3" = "#e15759",
"4" = "#76b7b2",
"5" = "#4e79a7",
"6" = "#f28e2b",
"7" = "#9c755f",
"8" = "#edc948",
"9" = "#b07aa1",
"10" = "#76b7b2",
"11" = "#ff9da7",
"12" = "#a0a0a0",
"13" = "#B3E2CD",
"14" = "black",
"0" = "black")
serratia_tree <- ggtree::read.tree("../../figshare_data/tree/snp_sites_aln_panaroo.aln.treefile")
rooted_serratia_tree <- phytools::midpoint.root(serratia_tree)
t1 <- ggtree::ggtree(rooted_serratia_tree, ladderize = T, right = T)
## fastani clusters:
fastani_data <- read.csv("../../figshare_data/clusters/95_to_99_ani_clusters.csv",
stringsAsFactors = F)
fastani_95 <- fastani_data %>%
select(Name,X95) %>%
rename(strain = Name, phylogroup = X95) %>% #phylogroups set by 95% ANI
mutate(strain = gsub("#","_",strain))
##### dplyr example to get the groups from this dataframe to put into groupOTU:
dplyr_genus_groups <- fastani_data %>%
select(Name, X95) %>% # only take the name of the strains and the clusters when cut off at 95% ANI
mutate(Name = gsub("#","_",Name)) %>% # remove hashes from WSI lane id's
group_by(X95) %>%
mutate(strains = list(Name)) %>% # get list of strains in each 95% ANI cluster
select(X95,strains) %>%
unique() %>% # remove the strain name/ lane id column and remove duplicate rows
pull(strains, name = X95) # take the list of the lists of strain names/lane ids and name each item of the list by the fastANI cluster
genus_groups_tree <- ggtree::groupOTU(rooted_serratia_tree, dplyr_genus_groups) #, overlap='abandon',connect = T)
#get tibble data:
tree_tibble <- as_tibble(genus_groups_tree)
## plot tree second time with colours:
t2 <-  ggtree::ggtree(genus_groups_tree, ladderize = T, right = T, size=0.5, aes(color=group)) +
scale_color_manual(values = c(tree_cols)) +
ggtree::geom_treescale(x=0, y=0, offset = 10, width = 0.1, linesize = 0.5) +
theme(legend.position = "none")
### add in fastbaps data:
fastbaps <- read.csv("../../figshare_data/clusters/fastbaps_clusters.csv",
row.names = 1,
stringsAsFactors = T)
## use level three
fastbaps_l3 <- fastbaps %>%
select(Level.3) %>%
rename(cluster = Level.3) %>%
tibble::rownames_to_column(var = "strain") %>%
mutate(cluster = as.factor(cluster))
##get the groups of the fastbaps:
fastbaps_groups <- fastbaps_l3 %>%
group_by(cluster) %>%
summarise(strains = list(strain)) %>%
pull(strains, name = cluster)
#get the clade names:
clade_labels <- micro.gen.extra::get_clade_nodes(genus_groups_tree, fastbaps_l3)
#draw the tree:
new_tree <- micro.gen.extra::add_clades_to_tree(t2,clade_labels)
pig_search <- read.csv("../../figshare_data/prodigiosin/pig_cluster_hamburger_strain_statistics.csv",
header = T,
stringsAsFactors = F) %>%
mutate(strain = gsub("#","_",strain)) %>%
tibble::column_to_rownames(var = "strain") %>%
select(number_of_gene_clusters) %>%
rename(Prodigiosin = number_of_gene_clusters)
svg("prod_tree.svg", width = 4, height =10)
new_tree %>% ggtree::gheatmap(pig_search, color = NULL,
width = 0.25,
colnames_position = "top",
colnames_angle = 90,
hjust = 0,
offset = 0.05,
colnames_offset_y = 10) +
scale_fill_gradient(low = "white",high = "red") +
ylim(0, max(new_tree$data$y) + 100) +
theme(legend.position = "none")
dev.off()
pig_present_genomes <- pig_search %>%
filter(Prodigiosin > 0 ) %>%
tibble::rownames_to_column(var = "strain") %>%
left_join(new_tree$data %>% select(label,y) %>% rename(strain = label)) %>%
arrange(-y) %>%
left_join(fastani_data %>% select(Name,X95) %>% rename(strain = Name) %>% mutate(strain = gsub("#","_",strain)))
#first untar:
untar(tarfile = "../../figshare_data/prodigiosin/1_extracted_gffs.tar.gz",
compressed = TRUE,
exdir = "../../figshare_data/prodigiosin/")
gff_files <- list.files(path = "../../figshare_data/prodigiosin/1_extracted_gffs/", pattern  = ".gff", full.names = T)
names(gff_files) <- gsub("#","_",list.files(path = "../../figshare_data/prodigiosin/1_extracted_gffs/", pattern  = ".gff", full.names = F))
names(gff_files) <- gsub("_cluster_1.gff","",names(gff_files))
#now get the list of these gff files in the correct order:
order_for_synteny <- gff_files[pig_present_genomes$strain]
cols <- c("ACPS" = "#3cb44b",
"Acyl-CoA_dh_M" = "#ffe119",
"Aminotran_1_2" = "#e6194b",
"Aminotran_3" = "#4363d8",
"AMP-binding" = "#f58231",
"Dimerisation2" = "#911eb4",
"DUF1295" = "#46f0f0",
"gene" = "#f032e6",
"HapK" = "#bcf60c",
"Ketoacyl-synt_C" = "#fabebe",
"NAD_binding_8" = "#008080",
"PEP-utilizers" = "#e6beff",
"TssM" = "#9a6324",
"X-unknown" = "#ffffff")
gggenes_names <- read.csv("../../figshare_data/prodigiosin/prodigiosin_search_gggenes_input.csv") %>%
select(CDS_identifier,gene) %>%
rename(gene = CDS_identifier, gene_name = gene)
gggenes_df <- micro.gen.extra::gggenes_df_from_gff_list(gff_list = order_for_synteny) %>%
left_join(gggenes_names) %>%
rename(colour_variable = gene_name)
order_for_synteny#
order_for_synteny
#first untar:
untar(tarfile = "../../figshare_data/prodigiosin/1_extracted_gffs.tar.gz",
exdir = "../../figshare_data/prodigiosin/")
gggenes_df <- micro.gen.extra::gggenes_df_from_gff_list(gff_list = order_for_synteny) %>%
left_join(gggenes_names) %>%
rename(colour_variable = gene_name)
examples <- pig_present_genomes %>%
group_by(X95) %>%
sample_n(1) %>%
arrange(-y)
gff_list <- gff_files[examples$strain]
#### now plot these examples:
gggenes_df <- micro.gen.extra::gggenes_df_from_gff_list(gff_list = gff_list) %>%
left_join(gggenes_names) %>%
rename(colour_variable = gene_name)
genoplotR_data <- list()
#now get the dna_seqs from the gggenes dataframe
genoplotR_data$dna_seqs <- micro.gen.extra::create_dnaseqs(gggenes_df,set_gene_fill_colours = TRUE, gene_colours = cols)
dir.create("temp_fasta")
fasta_from_gff_list(gff_files,names(gff_files),"temp_fasta",clean_up = FALSE)
#run the blast comparisons and read them for genoplotR
genoplotR_data$comparisons <- micro.gen.extra::create_blast_comparisons(names(genoplotR_data$dna_seqs), "temp_fasta",overwrite = TRUE)
svg("synteny_selected.svg",width = 15, height = 30)
genoPlotR::plot_gene_map(genoplotR_data$dna_seqs, genoplotR_data$comparisons,
scale=T,
legend = T,
arrow_head_len = 400,
annotation_height = 0.5,
plot_new = FALSE)
dev.off()
?fasta_from_gff_list
gff_files
gff_list
#### now plot these examples:
gggenes_df <- micro.gen.extra::gggenes_df_from_gff_list(gff_list = gff_list) %>%
left_join(gggenes_names) %>%
rename(colour_variable = gene_name)
genoplotR_data <- list()
#now get the dna_seqs from the gggenes dataframe
genoplotR_data$dna_seqs <- micro.gen.extra::create_dnaseqs(gggenes_df,set_gene_fill_colours = TRUE, gene_colours = cols)
dir.create("temp_fasta")
fasta_from_gff_list(gff_list = gff_files,gff_names = names(gff_files),fasta_dir = "temp_fasta",clean_up = FALSE)
fasta_from_gff_list(gff_list = gff_files,gff_names = names(gff_files),fasta_dir = "temp_fasta",clean_up = FALSE)
fasta_from_gff_list(gff_list = gff_files,gff_names = names(gff_files),fasta_dir = "temp_fasta",clean_up = FALSE)
selected_fastas <- fasta_from_gff_list(gff_list = gff_files,gff_names = names(gff_files),fasta_dir = "temp_fasta",clean_up = FALSE)
#run the blast comparisons and read them for genoplotR
genoplotR_data$comparisons <- micro.gen.extra::create_blast_comparisons(names(genoplotR_data$dna_seqs), "temp_fasta",overwrite = TRUE)
examples$strain
View(examples)
View(pig_present_genomes)
selected_strains <- c("GCA_900478395.1_32135_B01_genomic",
"26968_7_211",
"GCA_000214805.1_ASM21480v1_genomic",
"GCA_001902635.1_ASM190263v1_genomic",
"26968_7_242")
gff_list <- gff_files[selected_strains]
#### now plot these examples:
gggenes_df <- micro.gen.extra::gggenes_df_from_gff_list(gff_list = gff_list) %>%
left_join(gggenes_names) %>%
rename(colour_variable = gene_name)
setwd("~/Documents/Serratia_genus_paper/github_example/figure_scripts/figure_7")
source('~/Documents/Serratia_genus_paper/github_example/figure_scripts/figure_7/plot_figure_7.R', echo=TRUE)
