geom_text(data = fastbaps_and_phylogroups %>%
group_by(cluster) %>%
summarise(count = n()),
aes(x = cluster, y = count + 5, label = as.factor(count)))
fastbaps_and_phylogroups %>%
group_by(cluster) %>%
summarise(count = n())
ggplot() +
geom_bar(data = fastbaps_and_phylogroups,
aes(x = reorder(cluster, cluster, function(x) - length(x)), fill = as.factor(phylogroup))) +
scale_fill_manual(values = c(tree_cols)) +
geom_text(data = fastbaps_and_phylogroups %>%
group_by(cluster) %>%
summarise(count = n()),
aes(x = cluster, y = count + 5, label = as.factor(count))) +
xlab("Lineage") +
ylab("Num. genomes")
ggplot() +
geom_bar(data = fastbaps_and_phylogroups,
aes(x = reorder(cluster, cluster, function(x) - length(x)), fill = as.factor(phylogroup))) +
scale_fill_manual(values = c(tree_cols)) +
geom_text(data = fastbaps_and_phylogroups %>%
group_by(cluster) %>%
summarise(count = n()),
aes(x = cluster, y = count + 5, label = as.factor(count))) +
xlab("Lineage") +
ylab("Num. genomes")
selected_lineages <- fastbaps_l3 %>%
group_by(cluster) %>%
summarise(n=n()) %>%
filter(n >5) %>%
pull(cluster)
selected_lineages
selected_lineages <- fastbaps_l3 %>%
group_by(cluster) %>%
summarise(n=n()) %>%
filter(n >5)
View(selected_lineages)
?pull
selected_lineages
selected_lineages$cluster
selected(lineages)
selected_lineages %>% pull(cluster)
selected_lineages %>% pull(cluster) %>%unlist()
selected_lineages %>% pull(cluster) %>% unlist()
View(selected_lineages)
selected_lineages <- fastbaps_l3 %>%
group_by(cluster) %>%
summarise(n=n()) %>%
filter(n >5) %>%
pull(cluster)
selected_lienages
selected_lineages
pathways
View(pathways)
colnames(pathways)
pathway_occurence_df <- pathways %>%
select(genome,Pathway.Frame.id) %>%
rename(strain = genome, pathway = Pathway.Frame.id) %>%
distinct() %>%
mutate(presence = 1) %>% # add a nominal value for each present pathway in each genome - i.e 1 if present
tidyr::pivot_wider(names_from = "pathway", values_from = "presence", values_fill = 0) %>%
tidyr::pivot_longer(cols = !strain,names_to = "pathway", values_to = "presence") %>%
left_join(fastbaps_l3 %>% mutate(strain = gsub("[.]","_",strain)), by = "strain") %>% # add groups in (using lineages)
group_by(cluster,pathway)
View(pathway_occurence_df)
pathway_occurence_df <- pathways %>%
select(genome,Pathway.Frame.id) %>%
rename(strain = genome, pathway = Pathway.Frame.id) %>%
distinct() %>%
mutate(presence = 1) %>% # add a nominal value for each present pathway in each genome - i.e 1 if present
tidyr::pivot_wider(names_from = "pathway", values_from = "presence", values_fill = 0) %>%
tidyr::pivot_longer(cols = !strain,names_to = "pathway", values_to = "presence") %>%
left_join(fastbaps_l3 %>% mutate(strain = gsub("[.]","_",strain)), by = "strain") %>% # add groups in (using lineages)
group_by(cluster,pathway) %>%
#now only keep this if there are more than 5 genomes in each lineage
filter(cluster %in% selected(lineages))
View(pathway_occurence_df)
pathway_occurence_df <- pathways %>%
select(genome,Pathway.Frame.id) %>%
rename(strain = genome, pathway = Pathway.Frame.id) %>%
distinct() %>%
mutate(presence = 1) %>% # add a nominal value for each present pathway in each genome - i.e 1 if present
tidyr::pivot_wider(names_from = "pathway", values_from = "presence", values_fill = 0) %>%
tidyr::pivot_longer(cols = !strain,names_to = "pathway", values_to = "presence") %>%
left_join(fastbaps_l3 %>% mutate(strain = gsub("[.]","_",strain)), by = "strain") %>% # add groups in (using lineages)
group_by(cluster,pathway) %>%
#now only keep this if there are more than 5 genomes in each lineage
filter(cluster %in% selected_lineages)
pathway_occurence_df <- pathways %>%
select(genome,Pathway.Frame.id) %>%
rename(strain = genome, pathway = Pathway.Frame.id) %>%
distinct() %>%
mutate(presence = 1) %>% # add a nominal value for each present pathway in each genome - i.e 1 if present
tidyr::pivot_wider(names_from = "pathway", values_from = "presence", values_fill = 0) %>%
tidyr::pivot_longer(cols = !strain,names_to = "pathway", values_to = "presence") %>%
left_join(fastbaps_l3 %>% mutate(strain = gsub("[.]","_",strain)), by = "strain") %>% # add groups in (using lineages)
group_by(cluster,pathway) %>%
#now only keep this if there are more than 5 genomes in each lineage
filter(cluster %in% selected_lineages)
pathway_occurence_df <- pathways %>%
select(genome,Pathway.Frame.id) %>%
rename(strain = genome, pathway = Pathway.Frame.id) %>%
distinct() %>%
mutate(presence = 1) %>% # add a nominal value for each present pathway in each genome - i.e 1 if present
tidyr::pivot_wider(names_from = "pathway", values_from = "presence", values_fill = 0) %>%
tidyr::pivot_longer(cols = !strain,names_to = "pathway", values_to = "presence") %>%
left_join(fastbaps_l3 %>% mutate(strain = gsub("[.]","_",strain)), by = "strain") %>% # add groups in (using lineages)
group_by(cluster,pathway) %>%
#now only keep this if there are more than 5 genomes in each lineage
filter(cluster %in% selected_lineages)
pathway_occurence_df <- pathways %>%
select(genome,Pathway.Frame.id) %>%
rename(strain = genome, pathway = Pathway.Frame.id) %>%
distinct() %>%
mutate(presence = 1) %>% # add a nominal value for each present pathway in each genome - i.e 1 if present
tidyr::pivot_wider(names_from = "pathway", values_from = "presence", values_fill = 0) %>%
tidyr::pivot_longer(cols = !strain,names_to = "pathway", values_to = "presence") %>%
left_join(fastbaps_l3 %>% mutate(strain = gsub("[.]","_",strain)), by = "strain") %>% # add groups in (using lineages)
group_by(cluster,pathway)
pathway_occurence_df <- pathways %>%
select(genome,Pathway.Frame.id) %>%
rename(strain = genome, pathway = Pathway.Frame.id) %>%
distinct() %>%
mutate(presence = 1) %>% # add a nominal value for each present pathway in each genome - i.e 1 if present
tidyr::pivot_wider(names_from = "pathway", values_from = "presence", values_fill = 0) %>%
tidyr::pivot_longer(cols = !strain,names_to = "pathway", values_to = "presence") %>%
left_join(fastbaps_l3 %>% mutate(strain = gsub("[.]","_",strain)), by = "strain") %>% # add groups in (using lineages)
group_by(cluster,pathway) %>%
#now only keep this if there are more than 5 genomes in each lineage
filter(cluster %in% selected_lineages)
unique(pathway_occurence_df$cluster)
pathway_occurence_df <- pathways %>%
select(genome,Pathway.Frame.id) %>%
rename(strain = genome, pathway = Pathway.Frame.id) %>%
distinct() %>%
mutate(presence = 1) %>% # add a nominal value for each present pathway in each genome - i.e 1 if present
tidyr::pivot_wider(names_from = "pathway", values_from = "presence", values_fill = 0) %>%
tidyr::pivot_longer(cols = !strain,names_to = "pathway", values_to = "presence") %>%
left_join(fastbaps_l3 %>% mutate(strain = gsub("[.]","_",strain)), by = "strain") %>% # add groups in (using lineages)
group_by(cluster,pathway)
unique(pathway_occurence_df$cluster)
pathway_occurence_df <- pathways %>%
select(genome,Pathway.Frame.id) %>%
rename(strain = genome, pathway = Pathway.Frame.id) %>%
distinct() %>%
mutate(presence = 1) %>% # add a nominal value for each present pathway in each genome - i.e 1 if present
tidyr::pivot_wider(names_from = "pathway", values_from = "presence", values_fill = 0) %>%
tidyr::pivot_longer(cols = !strain,names_to = "pathway", values_to = "presence") %>%
left_join(fastbaps_l3 %>% mutate(strain = gsub("[.]","_",strain)), by = "strain") %>% # add groups in (using lineages)
group_by(cluster,pathway) %>%
#now only keep this if there are more than 5 genomes in each lineage
filter(cluster %in% selected_lineages) %>%
summarise(perc_in_group = sum(presence) / length(strain)) %>% # get incidence of the gene within each lineage
#filter(perc_in_group > 0) %>% # remove genes not seen in individual groups of strains
mutate(occurence_label = purrr::map(perc_in_group,
~ position_number(.x,
levels,
labels)
)
) ## map over incidence and assign group for the gene
upset_dfs <- vector(mode = "list", length = length(labels))
names(upset_dfs) <- labels
for (i in 1:length(labels)) {
l = labels[i]
upset_df <- pathway_occurence_df %>%
mutate(perc_in_group = ifelse(occurence_label == l, 1, 0 )) %>%
select(pathway,cluster,perc_in_group) %>%
tidyr::pivot_wider(names_from = cluster, values_from = perc_in_group)
#change the colnames back:
colnames(upset_df) <- gsub(glue::glue("{l}[.]"),"",colnames(upset_df))
upset_dfs[i] <-list(as.data.frame(upset_df))
}
#get lineage order for plot:
lineage_order <- t2$data %>%
filter(isTip== TRUE) %>%
rename(strain = label) %>%
left_join(fastbaps_l3, by = "strain") %>%
group_by(cluster) %>%
summarise(max_y = max(y)) %>%
arrange(max_y) %>%
mutate(cluster = as.character(cluster)) %>%
pull(cluster)
###get metadata for colouring:
### get the species for each fastbaps cluster (lineage):
metadata_for_upset <- fastani_data %>%
rename(strain = Name, phylogroup = X95) %>%
mutate(strain = gsub("#","_",strain)) %>%
left_join(fastbaps_l3, by = "strain") %>%
select(cluster,phylogroup) %>%
unique() %>%
rename(sets = cluster, species = phylogroup) %>%
mutate(species = gsub("11","S.rubidaea", species),
species = gsub("12","S.rubidaea_like", species),
species = gsub("13","S.marcescens_like", species),
species = gsub("10","S.odorifera", species),
species = gsub("4","S.liquefaciens", species),
species = gsub("6","S.ficaria", species),
species = gsub("3","S.fonticola", species),
species = gsub("5","S.entomophila", species),
species = gsub("1","S.proteamaculans_subs.quinovorans", species),
species = gsub("9","S.proteamaculans", species),
species = gsub("8","S.plymuthica", species),
species = gsub("7","S.grimesii", species),
species = gsub("2","S.marcescens", species))
#plot UpSet
svg("Core_and_softcore_pathways.svg", width = 10, height = 8)
UpSetR::upset(upset_dfs$Core, sets = c(lineage_order), order.by = "freq", keep.order = T,
set.metadata = list(data = metadata_for_upset, plots = list(
list(type = "matrix_rows",
column = "species",
colors = c(S.ficaria = "#f28e2b",
S.fonticola = "#e15759",
S.liquefaciens = "#76b7b2",
S.marcescens = "#59a14f",
S.plymuthica = "#edc948",
S.proteamaculans = "#b07aa1",
S.rubidaea = "#ff9da7",
S.grimesii = "#9c755f",
S.entomophila = "#4e79a7",
S.proteamaculans_subs.quinovorans = "#bab0ac",
S.odorifera = "#76b7b2",
S.marcescens_like = "#B3E2CD",
S.rubidaea_like = "#a0a0a0"),
alpha = 0.65))))
dev.off()
#get lineage order for plot:
lineage_order <- t2$data %>%
filter(isTip== TRUE) %>%
rename(strain = label) %>%
left_join(fastbaps_l3, by = "strain") %>%
group_by(cluster) %>%
summarise(max_y = max(y)) %>%
arrange(max_y) %>%
mutate(cluster = as.character(cluster)) %>%
#remove clusters with low numbers:
filter(cluster %in% selected_lineages) %>%
pull(cluster)
###get metadata for colouring:
### get the species for each fastbaps cluster (lineage):
metadata_for_upset <- fastani_data %>%
rename(strain = Name, phylogroup = X95) %>%
mutate(strain = gsub("#","_",strain)) %>%
left_join(fastbaps_l3, by = "strain") %>%
select(cluster,phylogroup) %>%
unique() %>%
rename(sets = cluster, species = phylogroup) %>%
mutate(species = gsub("11","S.rubidaea", species),
# species = gsub("12","S.rubidaea_like", species),
# species = gsub("13","S.marcescens_like", species),
# species = gsub("10","S.odorifera", species),
species = gsub("4","S.liquefaciens", species),
species = gsub("6","S.ficaria", species),
species = gsub("3","S.fonticola", species),
species = gsub("5","S.entomophila", species),
species = gsub("1","S.proteamaculans_subs.quinovorans", species),
species = gsub("9","S.proteamaculans", species),
species = gsub("8","S.plymuthica", species),
species = gsub("7","S.grimesii", species),
species = gsub("2","S.marcescens", species))
UpSetR::upset(upset_dfs$Core, sets = c(lineage_order), order.by = "freq", keep.order = T,
set.metadata = list(data = metadata_for_upset, plots = list(
list(type = "matrix_rows",
column = "species",
colors = c(S.ficaria = "#f28e2b",
S.fonticola = "#e15759",
S.liquefaciens = "#76b7b2",
S.marcescens = "#59a14f",
S.plymuthica = "#edc948",
S.proteamaculans = "#b07aa1",
S.rubidaea = "#ff9da7",
S.grimesii = "#9c755f",
S.entomophila = "#4e79a7",
S.proteamaculans_subs.quinovorans = "#bab0ac"),
# S.odorifera = "#76b7b2",
# S.marcescens_like = "#B3E2CD",
# S.rubidaea_like = "#a0a0a0"),
alpha = 0.65))))
?upset
UpSetR::upset(upset_dfs$Core, sets = c(lineage_order), order.by = "freq", keep.order = T,
text.scale = 2,
set.metadata = list(data = metadata_for_upset, plots = list(
list(type = "matrix_rows",
column = "species",
colors = c(S.ficaria = "#f28e2b",
S.fonticola = "#e15759",
S.liquefaciens = "#76b7b2",
S.marcescens = "#59a14f",
S.plymuthica = "#edc948",
S.proteamaculans = "#b07aa1",
S.rubidaea = "#ff9da7",
S.grimesii = "#9c755f",
S.entomophila = "#4e79a7",
S.proteamaculans_subs.quinovorans = "#bab0ac"),
# S.odorifera = "#76b7b2",
# S.marcescens_like = "#B3E2CD",
# S.rubidaea_like = "#a0a0a0"),
alpha = 0.65))))
#plot UpSet
svg("Core_and_softcore_pathways.svg", width = 10, height = 8)
UpSetR::upset(upset_dfs$Core, sets = c(lineage_order), order.by = "freq", keep.order = T,
text.scale = 2,
set.metadata = list(data = metadata_for_upset, plots = list(
list(type = "matrix_rows",
column = "species",
colors = c(S.ficaria = "#f28e2b",
S.fonticola = "#e15759",
S.liquefaciens = "#76b7b2",
S.marcescens = "#59a14f",
S.plymuthica = "#edc948",
S.proteamaculans = "#b07aa1",
S.rubidaea = "#ff9da7",
S.grimesii = "#9c755f",
S.entomophila = "#4e79a7",
S.proteamaculans_subs.quinovorans = "#bab0ac"),
# S.odorifera = "#76b7b2",
# S.marcescens_like = "#B3E2CD",
# S.rubidaea_like = "#a0a0a0"),
alpha = 0.65))))
dev.off()
UpSetR::upset(upset_dfs$Core, sets = c(lineage_order), order.by = "freq", keep.order = T,
c(numbers above bars)= 2,
set.metadata = list(data = metadata_for_upset, plots = list(
list(type = "matrix_rows",
column = "species",
colors = c(S.ficaria = "#f28e2b",
S.fonticola = "#e15759",
S.liquefaciens = "#76b7b2",
S.marcescens = "#59a14f",
S.plymuthica = "#edc948",
S.proteamaculans = "#b07aa1",
S.rubidaea = "#ff9da7",
S.grimesii = "#9c755f",
S.entomophila = "#4e79a7",
S.proteamaculans_subs.quinovorans = "#bab0ac"),
# S.odorifera = "#76b7b2",
# S.marcescens_like = "#B3E2CD",
# S.rubidaea_like = "#a0a0a0"),
alpha = 0.65))))
UpSetR::upset(upset_dfs$Core, sets = c(lineage_order), order.by = "freq", keep.order = T,
c("numbers above bars")= 2,
set.metadata = list(data = metadata_for_upset, plots = list(
list(type = "matrix_rows",
column = "species",
colors = c(S.ficaria = "#f28e2b",
S.fonticola = "#e15759",
S.liquefaciens = "#76b7b2",
S.marcescens = "#59a14f",
S.plymuthica = "#edc948",
S.proteamaculans = "#b07aa1",
S.rubidaea = "#ff9da7",
S.grimesii = "#9c755f",
S.entomophila = "#4e79a7",
S.proteamaculans_subs.quinovorans = "#bab0ac"),
# S.odorifera = "#76b7b2",
# S.marcescens_like = "#B3E2CD",
# S.rubidaea_like = "#a0a0a0"),
alpha = 0.65))))
UpSetR::upset(upset_dfs$Core, sets = c(lineage_order), order.by = "freq", keep.order = T,
c("numbers above bars") = 2,
set.metadata = list(data = metadata_for_upset, plots = list(
list(type = "matrix_rows",
column = "species",
colors = c(S.ficaria = "#f28e2b",
S.fonticola = "#e15759",
S.liquefaciens = "#76b7b2",
S.marcescens = "#59a14f",
S.plymuthica = "#edc948",
S.proteamaculans = "#b07aa1",
S.rubidaea = "#ff9da7",
S.grimesii = "#9c755f",
S.entomophila = "#4e79a7",
S.proteamaculans_subs.quinovorans = "#bab0ac"),
# S.odorifera = "#76b7b2",
# S.marcescens_like = "#B3E2CD",
# S.rubidaea_like = "#a0a0a0"),
alpha = 0.65))))
UpSetR::upset(upset_dfs$Core, sets = c(lineage_order), order.by = "freq", keep.order = T,
text.scale = 2,
set.metadata = list(data = metadata_for_upset, plots = list(
list(type = "matrix_rows",
column = "species",
colors = c(S.ficaria = "#f28e2b",
S.fonticola = "#e15759",
S.liquefaciens = "#76b7b2",
S.marcescens = "#59a14f",
S.plymuthica = "#edc948",
S.proteamaculans = "#b07aa1",
S.rubidaea = "#ff9da7",
S.grimesii = "#9c755f",
S.entomophila = "#4e79a7",
S.proteamaculans_subs.quinovorans = "#bab0ac"),
# S.odorifera = "#76b7b2",
# S.marcescens_like = "#B3E2CD",
# S.rubidaea_like = "#a0a0a0"),
alpha = 0.65))))
UpSetR::upset(upset_dfs$Core, sets = c(lineage_order), order.by = "freq", keep.order = T,
text.scale = c(1,1,1,1,1,2),
set.metadata = list(data = metadata_for_upset, plots = list(
list(type = "matrix_rows",
column = "species",
colors = c(S.ficaria = "#f28e2b",
S.fonticola = "#e15759",
S.liquefaciens = "#76b7b2",
S.marcescens = "#59a14f",
S.plymuthica = "#edc948",
S.proteamaculans = "#b07aa1",
S.rubidaea = "#ff9da7",
S.grimesii = "#9c755f",
S.entomophila = "#4e79a7",
S.proteamaculans_subs.quinovorans = "#bab0ac"),
# S.odorifera = "#76b7b2",
# S.marcescens_like = "#B3E2CD",
# S.rubidaea_like = "#a0a0a0"),
alpha = 0.65))))
#plot UpSet
svg("Core_and_softcore_pathways.svg", width = 10, height = 8)
UpSetR::upset(upset_dfs$Core, sets = c(lineage_order), order.by = "freq", keep.order = T,
text.scale = c(1,1,1,1,1,2),
set.metadata = list(data = metadata_for_upset, plots = list(
list(type = "matrix_rows",
column = "species",
colors = c(S.ficaria = "#f28e2b",
S.fonticola = "#e15759",
S.liquefaciens = "#76b7b2",
S.marcescens = "#59a14f",
S.plymuthica = "#edc948",
S.proteamaculans = "#b07aa1",
S.rubidaea = "#ff9da7",
S.grimesii = "#9c755f",
S.entomophila = "#4e79a7",
S.proteamaculans_subs.quinovorans = "#bab0ac"),
# S.odorifera = "#76b7b2",
# S.marcescens_like = "#B3E2CD",
# S.rubidaea_like = "#a0a0a0"),
alpha = 0.65))))
dev.off()
UpSetR::upset(upset_dfs$Core, sets = c(lineage_order), order.by = "freq", keep.order = T,
text.scale = c(1,1,1,1,1.4,2),
set.metadata = list(data = metadata_for_upset, plots = list(
list(type = "matrix_rows",
column = "species",
colors = c(S.ficaria = "#f28e2b",
S.fonticola = "#e15759",
S.liquefaciens = "#76b7b2",
S.marcescens = "#59a14f",
S.plymuthica = "#edc948",
S.proteamaculans = "#b07aa1",
S.rubidaea = "#ff9da7",
S.grimesii = "#9c755f",
S.entomophila = "#4e79a7",
S.proteamaculans_subs.quinovorans = "#bab0ac"),
# S.odorifera = "#76b7b2",
# S.marcescens_like = "#B3E2CD",
# S.rubidaea_like = "#a0a0a0"),
alpha = 0.65))))
ggplot() +
geom_bar(data = fastbaps_and_phylogroups,
aes(x = reorder(cluster, cluster, function(x) - length(x)), fill = as.factor(phylogroup))) +
scale_fill_manual(values = c(tree_cols)) +
geom_text(data = fastbaps_and_phylogroups %>%
group_by(cluster) %>%
summarise(count = n()),
aes(x = cluster, y = count + 5, label = as.factor(count))) +
xlab("Lineage") +
ylab("Num. genomes")
ggplot() +
geom_bar(data = fastbaps_and_phylogroups,
aes(x = reorder(cluster, cluster, function(x) - length(x)), fill = as.factor(phylogroup))) +
scale_fill_manual(values = c(tree_cols)) +
geom_text(data = fastbaps_and_phylogroups %>%
group_by(cluster) %>%
summarise(count = n()),
aes(x = cluster, y = count + 5, label = as.factor(count))) +
xlab("Lineage") +
ylab("Num. genomes") +
theme(legend.position = NULL)
ggplot() +
geom_bar(data = fastbaps_and_phylogroups,
aes(x = reorder(cluster, cluster, function(x) - length(x)), fill = as.factor(phylogroup))) +
scale_fill_manual(values = c(tree_cols)) +
geom_text(data = fastbaps_and_phylogroups %>%
group_by(cluster) %>%
summarise(count = n()),
aes(x = cluster, y = count + 5, label = as.factor(count))) +
xlab("Lineage") +
ylab("Num. genomes") +
theme(legend.position = "none")
ggplot() +
geom_bar(data = fastbaps_and_phylogroups,
aes(x = reorder(cluster, cluster, function(x) - length(x)), fill = as.factor(phylogroup))) +
scale_fill_manual(values = c(tree_cols)) +
geom_text(data = fastbaps_and_phylogroups %>%
group_by(cluster) %>%
summarise(count = n()),
aes(x = cluster, y = count + 5, label = as.factor(count))) +
xlab("Lineage") +
ylab("Num. genomes") +
theme(legend.position = "none") +
theme_bw()
ggplot() +
geom_bar(data = fastbaps_and_phylogroups,
aes(x = reorder(cluster, cluster, function(x) - length(x)), fill = as.factor(phylogroup))) +
scale_fill_manual(values = c(tree_cols)) +
geom_text(data = fastbaps_and_phylogroups %>%
group_by(cluster) %>%
summarise(count = n()),
aes(x = cluster, y = count + 5, label = as.factor(count))) +
xlab("Lineage") +
ylab("Num. genomes") +
theme_bw() +
theme(legend.position = "none")
